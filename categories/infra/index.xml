<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>infra on LinuxClub BLOG</title>
    <link>https://blog.linux.it.teu.ac.jp/categories/infra/</link>
    <description>Recent content in infra on LinuxClub BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (c) 2019, LinuxClub. All rights reserved.</copyright>
    <lastBuildDate>Wed, 07 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.linux.it.teu.ac.jp/categories/infra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>記事を GitHub Actions を使ってデプロイするようにしました</title>
      <link>https://blog.linux.it.teu.ac.jp/post/deploy-from-actions/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.linux.it.teu.ac.jp/post/deploy-from-actions/</guid>
      <description>この記事は, GitHub Actions のテストも兼ねた投稿です.
何気に去年から部長やってます Forell (@F0rell) です. このブログが長らく更新されてなかったのと, 自分が何もやってないのもあったので動かしてみました.
さて, URL からわかる通り, このブログは GitHub Pages を用いて公開されています (該当リポジトリ: https://github.com/lc-tut/lc-tut.github.io). サイトを構成するために Hugo を用いており, リポジトリでは source ブランチを Hugo を用いてビルドして master に向けて該当ディレクトリ (docs/) を git subtree を用いて push することによってページを公開できるようにしております.
しかし, 手動でビルド, master に push するのははっきり言って面倒くさいです (初記事なのに何言ってるんだと思いますが, 大目に見てほしいです). 加えて, やり方が書いてあるといえども, git subtree という普段 (私が) 使わないコマンドも用いるため, 公開までのハードルが高いです.
そのため, GitHub Actions を使って自動でビルド + デプロイをしたいと考えました.
GitHub Actions とは かなり雑に言うと GitHub が提供している CI/CD ツールです.
詳しいことはこことかここ見たらいいかと思います. 語れるほどやっているわけではないので URL 貼っつけになって申し訳ないです.</description>
    </item>
    
    <item>
      <title>外部向けサーバーのリプレイスを実施</title>
      <link>https://blog.linux.it.teu.ac.jp/post/server-replace-2019/</link>
      <pubDate>Thu, 11 Jul 2019 11:30:00 +0900</pubDate>
      
      <guid>https://blog.linux.it.teu.ac.jp/post/server-replace-2019/</guid>
      <description>3年のKoyamaです。外部向けに公開している公式サイトやスポーツ大会エントリーサイトをホスティングしているサーバー(VPS)をリプレイスしました。この記事では昨年の12月から今年1月にかけて取り組んだことについて振り返ってみます。
現状の把握 これまでのサーバーの構成を把握することからはじめました。具体的には、どのようなサービスが動作して、移行が必要かを洗い出しました。
従来の構成:
 OS: CentOS 6.9 x86_64  GMO CloudのCentOS 6.2 Templateから導入   DNS(Bind) 9.8.2 Web(Nginx) 1.12.2 PHP 5.3.3 Python 2.6.6 uWSGI 2.0.10 MySQL Ver 14.14 Distrib 5.1.73 SQLite Ver 3.6.20 Postfix Ver 2.6.6  ミドルウェア(すべてパッケージからインストール)
把握した結果、OSのバージョンが古く、構築資料が無いことから再構築を行う判断をしました。
新たな構成の検討 提供する必要のあるサービスの洗い出しを行いました。その結果、以下のサービスが必要だと分かりました。
 DNS: 独自ドメインの管理 Web: Webサイトのホスティング SSL: WebのSSL対応 SSH: Webホスティング提供用  次にサーバー構成の検討を行いました。既存サーバーは1台だけでメモリとCPUが豊富にありました。しかし、リソースの利用状況を見る限り、そのリソースが活用されていることが確認できません。そこで、台数を2台へ増やし1台あたりのスペックを下げることにしました。この構成にすることで費用面を抑えつつ冗長化が行えました。
OS/ミドルウェアの選定 権威DNSサーバー DNSサーバーはこれまでBINDで運用されてきました。BINDは高機能な反面、脆弱性が見つかりやすくパッチ適用やアップデートなど運用コストが高いことが課題でした。移行にあたり機能と運用を考えNSDを採用しました。
Webサーバー これまでNginxで構築されてきたWebサーバーはこれまで通りNginxを採用しました。これは運用で問題なく利用できたことから判断しました。
Webホスティング SSH経由でサーバーへファイルをアップロードできるシステムが従来から存在しました。従来はOpenSSHとchrootを使って構築されていました。新システムではDockerでSSHサーバーを構築することにしました。
サーバー切り替え 今回の目標としてダウンタイム0で切り替えられることをあげました。既存のユーザーへ影響を与えずにサービス提供を継続することが大切であるという認識に基づいています。そのために以下の手順で切り替えを計画的におこないました。
 旧サーバー利用者へシステム移行を行うことを通知  メール, Twitterで周知 移行まで余裕をもたせて連絡   新サーバーの構築 切り替えを実施  DNSサーバーのみ新サーバーへ切り替え DNSサーバーから返すWebサーバーを新サーバーへ切り替え 旧サーバーへDNS, Webのアクセスが収束したことを確認    運用/監視 運用と監視は別の記事で紹介します。</description>
    </item>
    
    <item>
      <title>スポーツ大会エントリサイトを支えた技術 2018</title>
      <link>https://blog.linux.it.teu.ac.jp/post/sports-fes-entry-site/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.linux.it.teu.ac.jp/post/sports-fes-entry-site/</guid>
      <description>はじめに LinuxClubではスポーツ大会のエントリーサイトを運営しています。今年も体育会からの要請があり運営を行いました。この記事では運用に際し改善、改良を行った点を紹介します。
DNS 従来は www2.linux.it.teu.ac.jp/sports20xx/ の下に設置していました。今年度のサイトはサブドメイン sports.linux.it.teu.ac.jp に設置しました。
Nginx 担当: panakuma
ページ読み込みの高速化によるユーザビリティとセキュリティの向上のためHTTP/2とTLSv1.3に対応させました。
TLSv1.3対応 TLSv1.3はまだドラフト段階の規格なので5月現在で最新であったdraft22/23に対応しました。
使用したプログラム
 Nginx 1.13.10 OpenSSL 1.1.1-pre3  それぞれソースを公式サイトからダウンロードし、OpenSSLを組み込んでNginxをmakeしました。
レスポンスヘッダ/Cookie属性の変更 担当: koyama
セキュリティを高めるためにレスポンスヘッダへ以下を付与しました。
 strict-transport-security: max-age=15768000; includeSubdomains x-frame-options: SAMEORIGIN x-xss-protection: 1; mode=block x-content-type-options: nosniff cache-control: private, no-store pragma: no-cache  $ curl -si https://sports.linux.it.teu.ac.jp/ | head -n 15 HTTP/2 200 server: nginx date: Wed, 13 Jun 2018 01:36:00 GMT content-type: text/html; charset=utf-8 content-length: 2413 strict-transport-security: max-age=15768000; includeSubDomains x-frame-options: SAMEORIGIN x-xss-protection: 1; mode=block x-content-type-options: nosniff cache-control: private, no-store pragma: no-cache &amp;lt;!</description>
    </item>
    
  </channel>
</rss>
